[
    {
        "id": 1,
        "title": "Email Addresses",
        "prompt": "Write a regular expression to validate email addresses. There must be one or more (uppercase or lowercase) letters, numbers, periods, or underscores in any order before the @ symbol, but there musn't be an underscore preceding the @ symbol. After the @ symbol, we have the domain. The domain is separated by the second-level domain and the top-level domain (e.g., in \"username@gmail.com\", the second-level domain is \"gmail\" and the top-level domain is \".com\"). For the second-level domain, there must be one or more (uppercase or lowercase) letters, numbers, and periods in any order, but there musn't be a period at the end. The top-level domain must be either '.com', '.co', or '.edu'.",
        "valid_examples": [
            "test@example.com",
            "user.name@domain.co",
            "name.lastname@sub.domain.com",
            "vAlid_eMail@example.com",
            "dirid@terpmail.umd.edu",
            "330@umd.edu",
            "__a@gmail.com",
            "a_b@gmail.com"
        ],
        "invalid_examples": [
            "user@domain",
            "@domain.com",
            "user@domain.c",
            "user@.com",
            "user@domain..com",
            "user.name@domain.foo",
            "user@name@domain.com",
            "user@domain.com.",
            "user@domain-.com",
            "invalid-email@example.com",
            "@.com",
            "user@domain..com"
        ],
        "publicTests": [
            { "input": "test@example.com", "expected": true },
            { "input": "user.name@domain.co", "expected": true },
            { "input": "name.lastname@sub.domain.com", "expected": true },
            { "input": "vAlid_eMail@example.com", "expected": true },
            { "input": "dirid@terpmail.umd.edu", "expected": true },
            { "input": "330@umd.edu", "expected": true },
            { "input": "__a@gmail.com", "expected": true },
            { "input": "user@domain", "expected": false },
            { "input": "@domain.com", "expected": false },
            { "input": "user@domain.c", "expected": false },
            { "input": "user@.com", "expected": false },
            { "input": "user@domain..com", "expected": false },
            { "input": "user.name@domain.foo", "expected": false },
            { "input": "user@name@domain.com", "expected": false },
            { "input": "user@domain.com.", "expected": false },
            { "input": "user@domain-.com", "expected": false },
            { "input": "invalid-email@example.com", "expected": false },
            { "input": "a_b@gmail.com", "expected": true },
            { "input": "@.com", "expected": false },
            { "input": "user@domain..com", "expected": false }
        ],
        "secretTests": [
            { "input": "id@terpmail#umd#edu", "expected": false },
            { "input": "_@gmail.com", "expected": false },
            { "input": "a_@gmail.com", "expected": false },
            { "input": "invalid?email@example.com", "expected": false },
            { "input": "invalid.email@example_com", "expected": false },
            { "input": "valid.email@domain.com", "expected": true },
            { "input": "another.valid@domain.co", "expected": true },
            { "input": "valid123@sub.domain.edu", "expected": true },
            { "input": "valid.email@sub.domain.com", "expected": true },
            { "input": "valid_email@domain.com", "expected": true },
            { "input": "user@-domain.com", "expected": false },
            { "input": "user@domain.com", "expected": true },
            { "input": "user@domain.co", "expected": true },
            { "input": "user@domain.edu", "expected": true },
            { "input": "user@domain.com", "expected": true }
        ],
        "sampleAnswer": "([a-zA-Z0-9\\._])+[a-zA-Z0-9]@([a-zA-Z0-9\\.])+[a-zA-Z0-9]\\.(com|co|edu)"
    },
    {
        "id": 2,
        "title": "Secure Passwords",
        "prompt": "Write a regular expression to validate a password that must be between 8 to 15 characters, contain at least one uppercase letter, one lowercase letter, one digit, and one special character (allowed: !, @, #, $, %, ^, &, *) with no spaces.",
        "valid_examples": [
            "Abcd1234!",
            "P@ssw0rd1",
            "Sec!reP9",
            "Zz1#Zz1#",
            "Password1!",
            "Xyz!1234",
            "Valid1@Pass"
        ],
        "invalid_examples": [
            "password",
            "ABC123!!",
            "X y1!",
            "p@ss",
            "PassWord1",
            "NoSpecial123",
            "Short1!",
            "AllSpecial!!!!!!!",
            "InvalidPass"
        ],
        "publicTests": [
            { "input": "Abcd1234!", "expected": true },
            { "input": "P@ssw0rd1", "expected": true },
            { "input": "Sec!reP9", "expected": true },
            { "input": "Zz1#Zz1#", "expected": true },
            { "input": "Password1!", "expected": true },
            { "input": "Xyz!1234", "expected": true },
            { "input": "Valid1@Pass", "expected": true },
            { "input": "password", "expected": false },
            { "input": "ABC123!!", "expected": false },
            { "input": "X y1!", "expected": false },
            { "input": "p@ss", "expected": false },
            { "input": "PassWord1", "expected": false },
            { "input": "NoSpecial123", "expected": false },
            { "input": "Short1!", "expected": false },
            { "input": "AllSpecial!!!!!!!", "expected": false },
            { "input": "InvalidPass", "expected": false }
        ],
        "secretTests": [
            { "input": "ValidPass1!", "expected": true },
            { "input": "Another1@", "expected": true },
            { "input": "Short1!", "expected": false },
            { "input": "NoDigit!", "expected": false },
            { "input": "NoSpecial123", "expected": false },
            { "input": "AllSpecial!!!!!!!", "expected": false },
            { "input": "Valid1@Pass", "expected": true },
            { "input": "InvalidPass", "expected": false },
            { "input": "ValidPass1@", "expected": true },
            { "input": "AnotherValid1#", "expected": true }
        ],
        "sampleAnswer": ""
    },
    {
        "id": 3,
        "title": "US Phone Numbers",
        "prompt": "Write a regular expression to validate a US phone number in the format (XXX) XXX-XXXX, (XXX)-XXX-XXXX, or XXX-XXX-XXXX, allowing optional country code '+1 ' (space after) at the beginning. Make sure your solution includes spaces where necessary.",
        "valid_examples": [
            "(123) 456-7890",
            "123-456-7890",
            "+1 (123) 456-7890",
            "+1 123-456-7890",
            "+1 (123)-456-7890",
            "123-456-7890",
            "(123) 456-7890"
        ],
        "invalid_examples": [
            "1234567890",
            "(123)4567890",
            "+1 1234567",
            "123-45-6789",
            "999-9999",
            "(123 456-7890"
        ],
        "publicTests": [
            { "input": "(123) 456-7890", "expected": true },
            { "input": "123-456-7890", "expected": true },
            { "input": "+1 (123) 456-7890", "expected": true },
            { "input": "+1 (123)-456-7890", "expected": true },
            { "input": "+1 123-456-7890", "expected": true },
            { "input": "1234567890", "expected": false },
            { "input": "(123)4567890", "expected": false },
            { "input": "+1 1234567", "expected": false },
            { "input": "123-45-6789", "expected": false },
            { "input": "999-9999", "expected": false },
            { "input": "(123 456-7890", "expected": false }
        ],
        "secretTests": [
            { "input": "+1 123-456-7890", "expected": true },
            { "input": "+1 (123)-456-7890", "expected": true },
            { "input": "999-9999", "expected": false },
            { "input": "(123 456-7890", "expected": false },
            { "input": "123-456-7890", "expected": true },
            { "input": "(123) 456-7890", "expected": true },
            { "input": "+1 123-456-7890", "expected": true },
            { "input": "+1 (123)-456-7890", "expected": true },
            { "input": "999-9999", "expected": false },
            { "input": "(123 456-7890", "expected": false }
        ],
        "sampleAnswer": "(\\+1 )?(\\d{3}-\\d{3}-\\d{4}|\\(\\d{3}\\)(-| )\\d{3}-\\d{4})"
    },
    {
        "id": 4,
        "title": "IPv4 Addresses",
        "prompt": "Write a regular expression to validate an IPv4 address (four octets, each 0-255, separated by dots). Leading zeros are allowed, but each octet must be a valid decimal number in [0-255].",
        "valid_examples": [
            "192.168.1.1",
            "127.0.0.1",
            "255.255.255.255",
            "0.0.0.0",
            "10.10.10.10",
            "1.1.1.1",
            "01.02.03.04"
        ],
        "invalid_examples": [
            "256.0.0.1",
            "192.168.1",
            "192.168.1.256",
            "192.168.1.01.2",
            "999.888.777.666"
        ],
        "publicTests": [
            { "input": "192.168.1.1", "expected": true },
            { "input": "127.0.0.1", "expected": true },
            { "input": "255.255.255.255", "expected": true },
            { "input": "0.0.0.0", "expected": true },
            { "input": "10.10.10.10", "expected": true },
            { "input": "1.1.1.1", "expected": true },
            { "input": "01.02.03.04", "expected": true },
            { "input": "256.0.0.1", "expected": false },
            { "input": "192.168.1", "expected": false },
            { "input": "192.168.1.256", "expected": false },
            { "input": "192.168.1.01.2", "expected": false },
            { "input": "999.888.777.666", "expected": false }
        ],
        "secretTests": [
            { "input": "1.1.1.1", "expected": true },
            { "input": "01.02.03.04", "expected": true },
            { "input": "999.888.777.666", "expected": false },
            { "input": "192.168.1", "expected": false },
            { "input": "192.168.1.256", "expected": false },
            { "input": "192.168.1.01.2", "expected": false },
            { "input": "192.168.1.1", "expected": true },
            { "input": "10.10.10.10", "expected": true },
            { "input": "255.255.255.255", "expected": true },
            { "input": "256.0.0.1", "expected": false }
        ],
        "sampleAnswer": "((25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)"
    },
    {
        "id": 5,
        "title": "Hex Color Codes",
        "prompt": "Write a regular expression that matches valid 3-digit or 6-digit hexadecimal color codes, optionally preceded by '#'. Remember: in hex, each digit is in the range 0-9 or A-F. Letters can be uppercase or lowercase.",
        "valid_examples": [
            "#ABC",
            "FFF",
            "#000000",
            "f0f0f0",
            "#AaBbCc",
            "abc123",
            "#123456"
        ],
        "invalid_examples": [
            "#AB",
            "Z1Z1Z1",
            "12345G",
            "##123",
            "#XYZ",
            "FFFFFZ",
            "00000"
        ],
        "publicTests": [
            { "input": "#ABC", "expected": true },
            { "input": "FFF", "expected": true },
            { "input": "#000000", "expected": true },
            { "input": "f0f0f0", "expected": true },
            { "input": "#AaBbCc", "expected": true },
            { "input": "abc123", "expected": true },
            { "input": "#123456", "expected": true },
            { "input": "#AB", "expected": false },
            { "input": "Z1Z1Z1", "expected": false },
            { "input": "12345G", "expected": false },
            { "input": "##123", "expected": false },
            { "input": "#XYZ", "expected": false },
            { "input": "FFFFFZ", "expected": false },
            { "input": "00000", "expected": false }
        ],
        "secretTests": [
            { "input": "ABC123", "expected": true },
            { "input": "123456", "expected": true },
            { "input": "#FFAA00", "expected": true },
            { "input": "#ABCD", "expected": false },
            { "input": "#FFF0F0F", "expected": false },
            { "input": "#abcdgg", "expected": false }
        ],
        "sampleAnswer": "#?[A-Fa-f0-9]{3}([A-Fa-f0-9]{3})?"
    },
    {
        "id": 6,
        "title": "ISO 8601 Dates",
        "prompt": "Write a regular expression to validate 20th and 21st century dates in the format YYYY-MM-DD. The day must be 01-31, and month must be 01-12 (zero-padded). The day need not correspond to the month, but days must be in the valid range.",
        "valid_examples": [
            "2023-01-01",
            "1999-12-31",
            "2000-02-29",
            "2022-09-30",
            "1980-11-15",
            "2024-02-29",
            "2023-02-30"
        ],
        "invalid_examples": [
            "1899-02-15",
            "2023-13-01",
            "202-01-01",
            "2023-4-05",
            "2023-00-10",
            "2023-01-32",
            "2125-02-15"
        ],
        "publicTests": [
            { "input": "2023-01-01", "expected": true },
            { "input": "1999-12-31", "expected": true },
            { "input": "2000-02-29", "expected": true },
            { "input": "2022-09-30", "expected": true },
            { "input": "1980-11-15", "expected": true },
            { "input": "2024-02-29", "expected": true },
            { "input": "2023-02-30", "expected": true },
            { "input": "1899-02-15", "expected": false },
            { "input": "2023-13-01", "expected": false },
            { "input": "202-01-01", "expected": false },
            { "input": "2023-4-05", "expected": false },
            { "input": "2023-00-10", "expected": false },
            { "input": "2023-01-32", "expected": false },
            { "input": "2125-02-15", "expected": false }
        ],
        "secretTests": [
            { "input": "1980-11-15", "expected": true },
            { "input": "2024-02-29", "expected": true },
            { "input": "2023-00-10", "expected": false },
            { "input": "2023-01-32", "expected": false },
            { "input": "2030-05-20", "expected": true },
            { "input": "1825-02-29", "expected": false },
            { "input": "2025-02-29", "expected": true }
        ],
        "sampleAnswer": "(19|20)\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])"
    }

]