[
    {
        "id": 1,
        "title": "Email Addresses",
        "prompt": "Write a regular expression to validate email addresses.<br /><br />1. The email must begin with a username part:<br />&nbsp;&nbsp;&nbsp;&nbsp;- The username must consist of one or more uppercase or lowercase letters, numbers, periods (`.`), or underscores (`_`).<br />&nbsp;&nbsp;&nbsp;&nbsp;- An underscore is not allowed immediately before the `@` symbol.<br /><br />2. After the username part, the email must contain the <code>@</code> symbol.<br /><br />3. After the <code>@</code> symbol, we have the domain. The domain is divided into two parts: second-level domain, and top-level domain. In `username@gmail.com`, the second-level domain is `gmail` and the top-level domain is `.com`<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- Second-level domain: This must consist of one or more uppercase or lowercase letters, numbers, or periods (`.`). A period cannot appear at the end of this part.<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- Top-level domain (TLD): This must be one of the following: `.com`, `.co`, or `.edu`.<br /><br />Ensure that there are no additional characters before, after, or in between the required parts.",
        "valid_examples": [
            "test@example.com",
            "user.name@domain.co",
            "name.lastname@sub.domain.com",
            "vAlid_eMail@example.com",
            "dirid@terpmail.umd.edu",
            "330@umd.edu",
            "__a@gmail.com",
            "a_b@gmail.com",
            "USER@DOMAIN.com"
        ],
        "invalid_examples": [
            {
                "example": "user@domainccom",
                "reason": "missing dot between domain parts"
            },
            {
                "example": "user@domaincco",
                "reason": "missing dot between domain parts"
            },
            {
                "example": "user@domaincedu",
                "reason": "missing dot between domain parts"
            },
            {
                "example": "user@domain",
                "reason": "missing top-level domain"
            },
            {
                "example": "@domain.com",
                "reason": "missing username part"
            },
            {
                "example": "user@domain.c",
                "reason": "invalid top-level domain"
            },
            {
                "example": "user@.com",
                "reason": "missing second-level domain"
            },
            {
                "example": "user@domain..com",
                "reason": "double dot in domain"
            },
            {
                "example": "user.name@domain.foo",
                "reason": "invalid top-level domain"
            },
            {
                "example": "user@name@domain.com",
                "reason": "multiple @ symbols"
            },
            {
                "example": "user@domain.com.",
                "reason": "extra dot in domain"
            },
            {
                "example": "user@domain-.com",
                "reason": "invalid character in domain"
            },
            {
                "example": "invalid-email@example.com",
                "reason": "dashes not allowed; only underscores"
            },
            {
                "example": "@.com",
                "reason": "missing username and second-level domain"
            },
            {
                "example": "user@domain..com",
                "reason": "double dot in domain"
            },
            {
                "example": "abc_@domain.com",
                "reason": "underscore not allowed before @"
            },
            {
                "example": "abc.@domain.com",
                "reason": "dot not allowed at end of username"
            },
            {
                "example": "USERNAME@DOMAIN.COM",
                "reason": "uppercase letters in TLD"
            }
        ],
        "publicTests": [
            { "input": "test@example.com", "expected": true },
            { "input": "user.name@domain.co", "expected": true },
            { "input": "name.lastname@sub.domain.com", "expected": true },
            { "input": "vAlid_eMail@example.com", "expected": true },
            { "input": "dirid@terpmail.umd.edu", "expected": true },
            { "input": "330@umd.edu", "expected": true },
            { "input": "__a@gmail.com", "expected": true },
            { "input": "a_b@gmail.com", "expected": true },
            { "input": "USER@DOMAIN.com", "expected": true },
            { "input": "user@domainccom", "expected": false },
            { "input": "user@domaincco", "expected": false },
            { "input": "user@domaincedu", "expected": false },
            { "input": "user@domain", "expected": false },
            { "input": "@domain.com", "expected": false },
            { "input": "user@domain.c", "expected": false },
            { "input": "user@.com", "expected": false },
            { "input": "user@domain..com", "expected": false },
            { "input": "user.name@domain.foo", "expected": false },
            { "input": "user@name@domain.com", "expected": false },
            { "input": "user@domain.com.", "expected": false },
            { "input": "user@domain-.com", "expected": false },
            { "input": "invalid-email@example.com", "expected": false },
            { "input": "@.com", "expected": false },
            { "input": "user@domain..com", "expected": false },
            { "input": "abc_@domain.com", "expected": false },
            { "input": "abc.@domain.com", "expected": false },
            { "input": "USER@DOMAIN.COM", "expected": false }
        ],
        "hiddenTests": [
            { "input": "id@terpmail#umd#edu", "expected": false },
            { "input": "_@gmail.com", "expected": false },
            { "input": "a_@gmail.com", "expected": false },
            { "input": "invalid?email@example.com", "expected": false },
            { "input": "invalid.email@example_com", "expected": false },
            { "input": "valid.email@domain.com", "expected": true },
            { "input": "another.valid@domain.co", "expected": true },
            { "input": "valid123@sub.domain.edu", "expected": true },
            { "input": "valid.email@sub.domain.com", "expected": true },
            { "input": "valid_email@domain.com", "expected": true },
            { "input": "user@-domain.com", "expected": false },
            { "input": "user@domain.com", "expected": true },
            { "input": "user@domain.co", "expected": true },
            { "input": "user@domain.edu", "expected": true },
            { "input": "user@domain.com", "expected": true }
        ],
        "sampleAnswer": "([a-zA-Z0-9\\._])+[a-zA-Z0-9]@([a-zA-Z0-9\\.])+[a-zA-Z0-9]\\.(com|co|edu)"
    },
    {
        "id": 2,
        "title": "Secure Passwords",
        "prompt": "Write a regular expression to validate a password that must be between 8 to 15 characters, contain at least one uppercase letter, one lowercase letter, one digit, and one special character (allowed: !, @, #, $, %, ^, &, *) with no spaces.",
        "valid_examples": [
            "Abcd1234!",
            "P@ssw0rd1",
            "Sec!reP9",
            "Zz1#Zz1#",
            "Password1!",
            "Xyz!1234",
            "Valid1@Pass",
            "fifteencharssss"
        ],
        "invalid_examples": [
            {
                "example": "password",
                "reason": "missing uppercase, digit, special character"
            },
            {
                "example": "ABC123!!",
                "reason": "missing lowercase letter"
            },
            {
                "example": "X y1!",
                "reason": "contains space"
            },
            {
                "example": "p@ss",
                "reason": "too short"
            },
            {
                "example": "PassWord1",
                "reason": "missing special character"
            },
            {
                "example": "NoSpecial123",
                "reason": "missing special character"
            },
            {
                "example": "Short1!",
                "reason": "too short"
            },
            {
                "example": "AllSpecial!!!!!!!",
                "reason": "missing letters and digits"
            },
            {
                "example": "InvalidPass",
                "reason": "missing digit and special character"
            },
            {
                "example": "Abc1!2",
                "reason": "too short"
            },
            {
                "example": "Abc!xyzq",
                "reason": "missing digit"
            },
            {
                "example": "fifteencharssss",
                "reason": "missing uppercase, digit, special character"
            }
        ],
        "publicTests": [
            { "input": "Abcd1234!", "expected": true },
            { "input": "P@ssw0rd1", "expected": true },
            { "input": "Sec!reP9", "expected": true },
            { "input": "Zz1#Zz1#", "expected": true },
            { "input": "Password1!", "expected": true },
            { "input": "Xyz!1234", "expected": true },
            { "input": "Valid1@Pass", "expected": true },
            { "input": "fifteencharsS3!", "expected": true },
            { "input": "password", "expected": false },
            { "input": "ABC123!!", "expected": false },
            { "input": "X y1!", "expected": false },
            { "input": "p@ss", "expected": false },
            { "input": "PassWord1", "expected": false },
            { "input": "NoSpecial123", "expected": false },
            { "input": "Short1!", "expected": false },
            { "input": "AllSpecial!!!!!!!", "expected": false },
            { "input": "InvalidPass", "expected": false },
            { "input": "Abc1!2", "expected": false },
            { "input": "Abc!xyzq", "expected": false },
            { "input": "fifteencharssss", "expected": false }
        ],
        "hiddenTests": [
            { "input": "ValidPass1!", "expected": true },
            { "input": "Another1@", "expected": true },
            { "input": "Short1!", "expected": false },
            { "input": "NoDigit!", "expected": false },
            { "input": "NoSpecial123", "expected": false },
            { "input": "AllSpecial!!!!!!!", "expected": false },
            { "input": "Valid1@Pass", "expected": true },
            { "input": "InvalidPass", "expected": false },
            { "input": "ValidPass1@", "expected": true },
            { "input": "AnotherValid1#", "expected": true },
            { "input": "AnotherInValid1#", "expected": false }
        ],
        "sampleAnswer": "Recall the limitations of regular expressions learned in class — they have no memory. A finite state machine simply knows what state it is in; nothing else. Thus, the regex we have learned cannot validate the presence of these independent conditions (because they can appear in any order!) as it operates sequentially and based on patterns, not conditions.\n\nTo do this, you use a 'lookahead' assertion, `?=exp`, which is outside what is learned in this class. It basically just checks for the presence of `exp` without consuming any characters (so not taking a transition in a FSM). You could hardcode each and every possible ordering of the required characters, but the issue with that is obvious...\n\nThat being said, to do this you would have to check for the presence of each of the required characters in the password using the 'lookahead', and then simply assert that the password is some valid (8-15 character) combination of the allowed characters given that they exist from the 'lookahead' assertions.\n\nYou get: `(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[!@#$%^&*])[A-Za-z\\d!@#$%^&*]{8,15}`\n\nDetailed explanation: `(?=.*[A-Z])` checks for the presence of an uppercase letter, `(?=.*[a-z])` checks for the presence of a lowercase letter, `(?=.*\\d)` checks for the presence of a number, and `(?=.*[!@#$%^&*])` checks for the presence of a special character. Finally, `[A-Za-z\\d!@#$%^&*]{8,15}` just says to look for a 8- to 15-length combination of these valid characters given that they exist at least once.\n\nIf you tried to solve this, it's good learning nonetheless!"  
    },
    {
        "id": 3,
        "title": "U.S. Phone Numbers",
        "prompt": "Write a regular expression to validate a phone number in the format '(XXX) XXX-XXXX', '(XXX)-XXX-XXXX', or 'XXX-XXX-XXXX'.<br /><br />You must allow an optional United States country code '+1 ' (space after) at the beginning.<br /><br />Make sure your solution includes spaces where necessary.",
        "valid_examples": [
            "(123) 456-7890",
            "123-456-7890",
            "+1 (123) 456-7890",
            "+1 123-456-7890",
            "+1 (123)-456-7890",
            "123-456-7890",
            "(123) 456-7890"
        ],
        "invalid_examples": [
            {
                "example": "1234567890",
                "reason": "missing separators"
            },
            {
                "example": "(123)4567890",
                "reason": "missing space"
            },
            {
                "example": "+1 1234567",
                "reason": "invalid length"
            },
            {
                "example": "123-45-6789",
                "reason": "invalid phone number format"
            },
            {
                "example": "999-9999",
                "reason": "too short"
            },
            {
                "example": "(123 456-7890",
                "reason": "missing closing parenthesis"
            },
            {
                "example": "(123)456-7890",
                "reason": "missing space"
            },
            {
                "example": "(123) 4567890",
                "reason": "missing dash"
            },
            { 
                "example": "+1123-456-7890",
                "reason": "no space after country code"
            }
        ],
        "publicTests": [
            { "input": "(123) 456-7890", "expected": true },
            { "input": "123-456-7890", "expected": true },
            { "input": "+1 (123) 456-7890", "expected": true },
            { "input": "+1 (123)-456-7890", "expected": true },
            { "input": "+1 123-456-7890", "expected": true },
            { "input": "1234567890", "expected": false },
            { "input": "(123)4567890", "expected": false },
            { "input": "+1 1234567", "expected": false },
            { "input": "123-45-6789", "expected": false },
            { "input": "999-9999", "expected": false },
            { "input": "(123 456-7890", "expected": false },
            { "input": "(123)456-7890", "expected": false },
            { "input": "(123) 4567890", "expected": false },
            { "input": "+1123-456-7890", "expected": false }
        ],
        "hiddenTests": [
            { "input": "+1 123-456-7890", "expected": true },
            { "input": "+1 (123)-456-7890", "expected": true },
            { "input": "999-9999", "expected": false },
            { "input": "(123 456-7890", "expected": false },
            { "input": "123-456-7890", "expected": true },
            { "input": "(123) 456-7890", "expected": true },
            { "input": "+1 123-456-7890", "expected": true },
            { "input": "+1 (123)-456-7890", "expected": true },
            { "input": "999-9999", "expected": false },
            { "input": "(123 456-7890", "expected": false },
            { "input": "123456-7890", "expected": false }
        ],
        "sampleAnswer": "(\\+1 )?(\\d{3}-\\d{3}-\\d{4}|\\(\\d{3}\\)(-| )\\d{3}-\\d{4})"
    },
    {
        "id": 4,
        "title": "IPv4 Addresses",
        "prompt": "Write a regular expression to validate an IPv4 address (four octets, each 0-255, separated by dots).<br /><br />Zero-padding is allowed, but each octet must be a valid decimal number in the range.",
        "valid_examples": [
            "192.168.1.1",
            "127.0.0.1",
            "255.255.255.255",
            "0.0.0.0",
            "10.10.10.10",
            "1.1.1.1",
            "01.02.03.04"
        ],
        "invalid_examples": [
            {
                "example": "256.0.0.1",
                "reason": "octet exceeds 255"
            },
            {
                "example": "192.168.1",
                "reason": "missing octet"
            },
            {
                "example": "192.168.1.256",
                "reason": "octet exceeds 255"
            },
            {
                "example": "192.168.1.01.2",
                "reason": "too many octets"
            },
            {
                "example": "999.888.777.666",
                "reason": "octets exceed range"
            },
            {
                "example": "255.s55.255.255",
                "reason": "invalid character s"
            },
            {
                "example": "0001.001.010.255",
                "reason": "too many leading zeros"
            },
            {
                "example": "192.abc.1.1",
                "reason": "invalid character"
            }
        ],
        "publicTests": [
            { "input": "192.168.1.1", "expected": true },
            { "input": "127.0.0.1", "expected": true },
            { "input": "255.255.255.255", "expected": true },
            { "input": "0.0.0.0", "expected": true },
            { "input": "10.10.10.10", "expected": true },
            { "input": "1.1.1.1", "expected": true },
            { "input": "01.02.03.04", "expected": true },
            { "input": "256.0.0.1", "expected": false },
            { "input": "192.168.1", "expected": false },
            { "input": "192.168.1.256", "expected": false },
            { "input": "192.168.1.01.2", "expected": false },
            { "input": "999.888.777.666", "expected": false },
            { "input": "255.s55.255.255", "expected": false },
            { "input": "0001.001.010.255", "expected": false },
            { "input": "192.abc.1.1", "expected": false }
        ],
        "hiddenTests": [
            { "input": "1.1.1.1", "expected": true },
            { "input": "01.02.03.04", "expected": true },
            { "input": "999.888.777.666", "expected": false },
            { "input": "192.168.1", "expected": false },
            { "input": "192.168.1.256", "expected": false },
            { "input": "192.168.1.01.2", "expected": false },
            { "input": "192.168.1.1", "expected": true },
            { "input": "10.10.10.10", "expected": true },
            { "input": "255.255.255.255", "expected": true },
            { "input": "256.0.0.1", "expected": false }
        ],
        "sampleAnswer": "((25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d?\\d)"
    },
    {
        "id": 5,
        "title": "Hex Color Codes",
        "prompt": "Write a regular expression that matches valid 3-digit (#XXX) or 6-digit (#XXXXXX) hexadecimal color codes, which is basically just a combination of 3 or 6 hexadecimal digits. The color code is optionally preceded by '#'.<br /><br />Remember: in hex, each digit is in the range 0-9 or A-F.<br /><br />Letters can be uppercase or lowercase.",
        "valid_examples": [
            "#ABC",
            "FFF",
            "#000000",
            "f0f0f0",
            "666",
            "#AaBbCc",
            "abc123",
            "#123456"
        ],
        "invalid_examples": [
            {
                "example": "#AB",
                "reason": "invalid length"
            },
            {
                "example": "Z1Z1Z1",
                "reason": "invalid character 'Z'"
            },
            {
                "example": "12345G",
                "reason": "invalid character 'G'"
            },
            {
                "example": "##123",
                "reason": "double #"
            },
            {
                "example": "#XYZ",
                "reason": "invalid characters 'X' 'Y' 'Z'"
            },
            {
                "example": "FFFFFZ",
                "reason": "invalid character 'Z'"
            },
            {
                "example": "00000",
                "reason": "invalid length"
            },
            {
                "example": "#1234567",
                "reason": "invalid length"
            },
            {
                "example": "#",
                "reason": "missing digits"
            }
        ],
        "publicTests": [
            { "input": "#ABC", "expected": true },
            { "input": "FFF", "expected": true },
            { "input": "#000000", "expected": true },
            { "input": "f0f0f0", "expected": true },
            { "input": "666", "expected": true },
            { "input": "#AaBbCc", "expected": true },
            { "input": "abc123", "expected": true },
            { "input": "#123456", "expected": true },
            { "input": "#AB", "expected": false },
            { "input": "Z1Z1Z1", "expected": false },
            { "input": "12345G", "expected": false },
            { "input": "##123", "expected": false },
            { "input": "#XYZ", "expected": false },
            { "input": "FFFFFZ", "expected": false },
            { "input": "00000", "expected": false },
            { "input": "#1234567", "expected": false },
            { "input": "#", "expected": false }
        ],
        "hiddenTests": [
            { "input": "ABC123", "expected": true },
            { "input": "123456", "expected": true },
            { "input": "#FFAA00", "expected": true },
            { "input": "#ABCD", "expected": false },
            { "input": "#FFF0F0F", "expected": false },
            { "input": "#abcdgg", "expected": false }
        ],
        "sampleAnswer": "#?[A-Fa-f0-9]{3}([A-Fa-f0-9]{3})?"
    },
    {
        "id": 6,
        "title": "ISO 8601 Dates",
        "prompt": "Write a regular expression to validate 20th and 21st century dates in the ISO 8601 format YYYY-MM-DD.<br /><br />The day must be 01-31, and month must be 01-12 (zero-padded). The day need not correspond to the month, but days must be in the valid range.",
        "valid_examples": [
            "2023-01-01",
            "1999-12-31",
            "2000-02-29",
            "2022-09-30",
            "1980-11-15",
            "2024-02-29",
            "2023-02-30",
            "2099-12-31"
        ],
        "invalid_examples": [
            {
                "example": "1899-02-15",
                "reason": "year out of range"
            },
            {
                "example": "2023-13-01",
                "reason": "invalid month"
            },
            {
                "example": "202-01-01",
                "reason": "year not four digits"
            },
            {
                "example": "2023-4-05",
                "reason": "month not zero-padded"
            },
            {
                "example": "2023-00-10",
                "reason": "invalid month"
            },
            {
                "example": "2023-01-32",
                "reason": "invalid day"
            },
            {
                "example": "2125-02-15",
                "reason": "year out of range"
            },
            {
                "example": "1900-00-01",
                "reason": "invalid month"
            },
            {
                "example": "2025-02-32",
                "reason": "invalid day"
            }
        ],
        "publicTests": [
            { "input": "2023-01-01", "expected": true },
            { "input": "1999-12-31", "expected": true },
            { "input": "2000-02-29", "expected": true },
            { "input": "2022-09-30", "expected": true },
            { "input": "1980-11-15", "expected": true },
            { "input": "2024-02-29", "expected": true },
            { "input": "2023-02-30", "expected": true },
            { "input": "2099-12-31", "expected": true },
            { "input": "1899-02-15", "expected": false },
            { "input": "2023-13-01", "expected": false },
            { "input": "202-01-01", "expected": false },
            { "input": "2023-4-05", "expected": false },
            { "input": "2023-00-10", "expected": false },
            { "input": "2023-01-32", "expected": false },
            { "input": "2125-02-15", "expected": false },
            { "input": "1900-00-01", "expected": false },
            { "input": "2025-02-32", "expected": false }
        ],
        "hiddenTests": [
            { "input": "1980-11-15", "expected": true },
            { "input": "2024-02-29", "expected": true },
            { "input": "2023-00-10", "expected": false },
            { "input": "2023-01-32", "expected": false },
            { "input": "2030-05-20", "expected": true },
            { "input": "1825-02-29", "expected": false },
            { "input": "2025-02-29", "expected": true }
        ],
        "sampleAnswer": "(19|20)\\d{2}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])"
    },
    {
        "id": 7,
        "title": "Absolute Paths",
        "prompt": "Write a regular expression describing an absolute path to a file in Linux. Because the path is absolute, the first direct must either be the home (`~`) or root (`/`) directory.<br /><br />Each directory name in the path has the restriction that the first character can only be an uppercase or lowercase letter, but characters after that may be alphanumeric or an underscore.<br /><br />If the path references a file, the filename must have one or more alphanumeric characters or an underscore (may start with a number or underscore) and must have an extension afterwards. The extension will be a period folowed by a lowercase letter followed by 0 or more lowercase letters or numbers (e.g., `.txt`, `.png`., `.ml`, `.mp4`, etc.). No underscores in the extension.<br /><br />The destination may or may not have a slash afterwards.",
        "valid_examples": [
            "~",
            "~/",
            "~/myFile.txt",
            "~/Folder1/File.png",
            "~/Folder1/Folder2/File.dat",
            "~/Documents/Work/Report.pdf",
            "~/Music/Pop/Song.mp3",
            "~/Projects/year2023/Project1/main.py",
            "/usr/local/bin/script.sh",
            "/Home/User/Documents/file.ml",
            "~/Downloads/Image.jpeg",
            "/Folder/Sub_Folder/File.md",
            "/Folder/SubFolder/File_3.md",
            "~/folder",
            "/Folder/SubFolder/File.txt/"
        ],
        "invalid_examples": [
            {
                "example": "~Folder",
                "reason": "missing slash after ~"
            },
            {
                "example": "~/file.",
                "reason": "missing extension"
            },
            {
                "example": "~/InvalidFolder/File.TXT",
                "reason": "extension uppercase"
            },
            {
                "example": "~/folder1/Folder2/File.",
                "reason": "missing extension"
            },
            {
                "example": "~//",
                "reason": "double slash"
            },
            {
                "example": "~/3Folder_Sub/File.txt",
                "reason": "directory starts with a number"
            },
            {
                "example": "/folder//File.txt",
                "reason": "double slash in path"
            },
            {
                "example": "/Folder/SubFolder//File.md",
                "reason": "double slash in path"
            },
            {
                "example": "~/Folder-/File.txt",
                "reason": "invalid character in directory"
            },
            {
                "example": "/folder/subfolder//file.txt",
                "reason": "double slash in path"
            },
            {
                "example": "/Folder/SubFolder/File.tx_",
                "reason": "invalid character in extension"
            },
            {
                "example": "~/Folder$Name/File.txt",
                "reason": "invalid character in directory"
            },
            {
                "example": "/folder/subfolder/file.",
                "reason": "missing extension"
            },
            {
                "example": "~/Folder/SubFolder/File.jPg",
                "reason": "extension uppercase"
            },
            {
                "example": "~/Folder//SubFolder/File.txt",
                "reason": "double slash in path"
            },
            {
                "example": "/Folder1/1SubFolder/File.md",
                "reason": "directory starts with a number"
            },
            {
                "example": "/folder/SubFolder//file.txt",
                "reason": "double slash in path"
            },
            {
                "example": "~/9folder/file.txt",
                "reason": "directory starts with a number"
            }
        ],
        "publicTests": [
            { "input": "~", "expected": true },
            { "input": "~/", "expected": true },
            { "input": "~/myFile.txt", "expected": true },
            { "input": "~/Folder1/File.png", "expected": true },
            { "input": "~/Folder1/Folder2/File.dat", "expected": true },
            { "input": "~/Documents/Work/Report.pdf", "expected": true },
            { "input": "~/Music/Pop/Song.mp3", "expected": true },
            { "input": "~/Projects/year2023/Project1/main.py", "expected": true },
            { "input": "/usr/local/bin/script.sh", "expected": true },
            { "input": "/Home/User/Documents/file.ml", "expected": true },
            { "input": "~/Downloads/Image.jpeg", "expected": true },
            { "input": "/Folder/Sub_Folder/File.md", "expected": true },
            { "input": "/Folder/SubFolder/File_3.md", "expected": true },
            { "input": "~/folder", "expected": true },
            { "input": "/Folder/SubFolder/File.txt/", "expected": true },
            { "input": "~Folder", "expected": false },
            { "input": "~/file.", "expected": false },
            { "input": "~/InvalidFolder/File.TXT", "expected": false },
            { "input": "~/folder1/Folder2/File.", "expected": false },
            { "input": "~//", "expected": false },
            { "input": "~/3Folder_Sub/File.txt", "expected": false },
            { "input": "/folder//File.txt", "expected": false },
            { "input": "/Folder/SubFolder//File.md", "expected": false },
            { "input": "~/Folder-/File.txt", "expected": false },
            { "input": "/folder/subfolder//file.txt", "expected": false },
            { "input": "/Folder/SubFolder/File.tx_", "expected": false },
            { "input": "~/Folder$Name/File.txt", "expected": false },
            { "input": "/folder/subfolder/file.", "expected": false },
            { "input": "~/Folder/SubFolder/File.jPg", "expected": false },
            { "input": "~/Folder//SubFolder/File.txt", "expected": false },
            { "input": "/Folder1/1SubFolder/File.md", "expected": false },
            { "input": "/folder/SubFolder//file.txt", "expected": false },
            { "input": "~/9folder/file.txt", "expected": false }
        ],
        "hiddenTests": [
            { "input": "~/abc123/xyz789/data.json", "expected": true },
            { "input": "~/F/f.old", "expected": true },
            { "input": "~/123Folder/File.txt", "expected": false },
            { "input": "/Folder/SubFolder/File.md", "expected": true },
            { "input": "/usr/bin/env", "expected": true },
            { "input": "~/Folder/SubFolder/file.TXT", "expected": false },
            { "input": "~/Folder_1/File.txt", "expected": true },
            { "input": "/folder/SubFolder/File.md", "expected": true },
            { "input": "/Folder//File.txt", "expected": false },
            { "input": "~/Folder/SubFolder/file.", "expected": false },
            { "input": "/Folder/SubFolder/File.MD", "expected": false },
            { "input": "~/Folder/SubFolder/File.jPg", "expected": false },
            { "input": "~/Folder//SubFolder/File.txt", "expected": false },
            { "input": "~/fol_der/Sub_Folder/file.md", "expected": true },
            { "input": "/Folder1/1SubFolder/File.md", "expected": false },
            { "input": "~/Projects/2023/Project1/main.py", "expected": false },
            { "input": "/A/b_c/d_e_f/file123.txt", "expected": true },
            { "input": "~/New_Folder/Sub_Folder/file1.md", "expected": true },
            { "input": "~/Folder-/File.txt", "expected": false },
            { "input": "/folder/subfolder//file.txt", "expected": false },
            { "input": "/Folder/SubFolder/File.tx_", "expected": false },
            { "input": "~/Folder$Name/File.txt", "expected": false },
            { "input": "/Folder_Name/File123.mp4", "expected": true },
            { "input": "/folder/subfolder/file.", "expected": false }
        ],
        "sampleAnswer": "~?(\\/[a-zA-Z][a-zA-Z0-9_]*)*(\\/[a-zA-Z0-9_]+\\.[a-z][a-z0-9]+?)?\\/?"
    },
    {
        "id": 8,
        "title": "Military and Standard Time",
        "prompt": "Write a regular expression describing a time in military time (24-hour format) or standard time (12-hour format).<br /><br />If the time is in military time, the format is HH:MM. The hour must be a zero-padded number from 00 to 23, and the minute must be a zero-padded number from 00 to 59.<br /><br />If the time is in standard time, the format is HH:MM (a.m./p.m.). The hour must be a zero-padded number from 01 to 12, and the minute must be a zero-padded number from 00 to 59. Then, state whether the time is anti-meridian or post-meridian using the abbreviations 'a.m.' or 'p.m', respectively. The abbreviations must have periods as shown. and make sure there is a space between the time and the abbreviation.",
        "valid_examples": [
            "00:00",
            "23:59",
            "01:00 a.m.",
            "12:45 p.m.",
            "12:00 p.m.",
            "09:15 a.m.",
            "07:30 p.m.",
            "11:59 p.m.",
            "01:01 a.m.",
            "12:59 a.m."
        ],
        "invalid_examples": [
            {
                "example": "24:00",
                "reason": "hour out of range"
            },
            {
                "example": "13:60",
                "reason": "minute out of range"
            },
            {
                "example": "00:00 a.m.",
                "reason": "military time with a.m."
            },
            {
                "example": "01:30 am",
                "reason": "missing periods in am"
            },
            {
                "example": "00:60",
                "reason": "minute out of range"
            },
            {
                "example": "13:00 a.m.",
                "reason": "hour out of range for a.m."
            },
            {
                "example": "12:00 pm",
                "reason": "missing periods in pm"
            },
            {
                "example": "03:75 a.m.",
                "reason": "minute out of range"
            },
            {
                "example": "24:01",
                "reason": "hour out of range"
            },
            {
                "example": "11:61 p.m.",
                "reason": "minute out of range"
            },
            {
                "example": "23:60",
                "reason": "minute out of range"
            },
            {
                "example": "12:59a.m.",
                "reason": "missing space"
            }
        ],
        "publicTests": [
            { "input": "00:00", "expected": true },
            { "input": "23:59", "expected": true },
            { "input": "01:00 a.m.", "expected": true },
            { "input": "12:45 p.m.", "expected": true },
            { "input": "12:00 p.m.", "expected": true },
            { "input": "09:15 a.m.", "expected": true },
            { "input": "07:30 p.m.", "expected": true },
            { "input": "11:59 p.m.", "expected": true },
            { "input": "01:01 a.m.", "expected": true },
            { "input": "12:59 a.m.", "expected": true },
            { "input": "24:00", "expected": false },
            { "input": "13:60", "expected": false },
            { "input": "00:00 a.m.", "expected": false },
            { "input": "01:30 am", "expected": false },
            { "input": "00:60", "expected": false },
            { "input": "13:00 a.m.", "expected": false },
            { "input": "12:00 pm", "expected": false },
            { "input": "03:75 a.m.", "expected": false },
            { "input": "24:01", "expected": false },
            { "input": "11:61 p.m.", "expected": false },
            { "input": "23:60", "expected": false },
            { "input": "12:59a.m.", "expected": false }
        ],
        "hiddenTests": [
            { "input": "09:09 a.m.", "expected": true },
            { "input": "12:59 a.m.", "expected": true },
            { "input": "12:00 p.m.", "expected": true },
            { "input": "07:01 p.m.", "expected": true },
            { "input": "03:45 p.m.", "expected": true },
            { "input": "00:59", "expected": true },
            { "input": "23:00", "expected": true },
            { "input": "11:59 p.m.", "expected": true },
            { "input": "10:10 a.m.", "expected": true },
            { "input": "08:08 p.m.", "expected": true },
            { "input": "00:60", "expected": false },
            { "input": "13:00 a.m.", "expected": false },
            { "input": "12:00 pm", "expected": false },
            { "input": "07:30 pm", "expected": false },
            { "input": "24:00", "expected": false },
            { "input": "12:60 a.m.", "expected": false },
            { "input": "11:59", "expected": true },
            { "input": "01:00 AM", "expected": false },
            { "input": "1:00 a.m.", "expected": false },
            { "input": "00:00 am", "expected": false }
        ],
        "sampleAnswer": "(([0-1][0-9]|2[0-3]):[0-5][0-9])|((0[1-9]|1[012]):[0-5][0-9] (a\\.m\\.|p\\.m\\.))"
    }, 
    {
        "id": 9,
        "title": "CRON",
        "prompt": "CRON (Command Run On Notice) is a time-based job scheduler (based on a CRON table) for Unix-like operating systems. You can edit your CRON table with `crontab -e` or the superuser's CRON table with `sudo crontab -e`.<br /><br />A CRON table's line format is: `minute hour day_of_month month day_of_week script_to_execute`<br /><br />Write a regular expression that represents a CRON table's line format. The `minute`s are 0-59, `hour`s are 0-23, `day_of_month` is 1-31, `month` is 1-12, and `day_of_week` is 0-6 (where Sunday is 0). If you do not want to specify a specific element, you must wildcard it with a '*'.<br /><br />Some examples: `15 * * * *` will run every 15 minutes past the hour, every hour, every day of the month, every month, every day of the week; `15 3 * * 0` will run 15 minutes past 3:00 a.m., every day of the month, every month, every Sunday.<br /><br />You may not zero-pad numbers. You can assume that the script to be executed is always `~/myScript`. Make sure spaces are provided where necessary.",
        "valid_examples": [
            "0 0 * * * ~/myScript",
            "59 23 31 12 6 ~/myScript",
            "15 * * * * ~/myScript",
            "* 12 * * 0 ~/myScript",
            "5 4 10 11 2 ~/myScript"
        ],
        "invalid_examples": [
            {
                "example": "30 14 15 6 3 ~/deployScript.sh",
                "reason": "script name incorrect"
            },
            {
                "example": "10 3 15 7 2 ~/execute.sh",
                "reason": "script name incorrect"
            },
            {
                "example": "15 * * * * ~/myScript.sh",
                "reason": "random script extension"
            },
            {
                "example": "60 0 1 1 0 ~/myScript",
                "reason": "minute out of range"
            },
            {
                "example": "* 24 1 1 0 ~/myScript",
                "reason": "hour out of range"
            },
            {
                "example": "0 0 0 1 0 ~/myScript",
                "reason": "day_of_month out of range"
            },
            {
                "example": "0 0 1 1 7 ~/myScript",
                "reason": "day_of_week out of range"
            },
            {
                "example": "0 0 1 1 0",
                "reason": "no file"
            },
            {
                "example": "0 0 32 1 0 ~/myScript",
                "reason": "day_of_month out of range"
            },
            {
                "example": "05 08 * * * ~/myScript",
                "reason": "zero-padded numbers"
            },
            {
                "example": "* * 0 13 * ~/myScript",
                "reason": "day_of_month out of range"
            }
        ],
        "publicTests": [
            { "input": "0 0 * * * ~/myScript", "expected": true },
            { "input": "59 23 31 12 6 ~/myScript", "expected": true },
            { "input": "15 * * * * ~/myScript", "expected": true },
            { "input": "30 14 15 6 3 ~/deployScript.sh", "expected": false },
            { "input": "* 12 * * 0 ~/myScript", "expected": true },
            { "input": "5 4 10 11 2 ~/myScript", "expected": true },
            { "input": "10 3 15 7 2 ~/execute.sh", "expected": false },
            { "input": "15 * * * * ~/myScript.sh", "expected": false },
            { "input": "60 0 1 1 0 ~/myScript", "expected": false },
            { "input": "* 24 1 1 0 ~/myScript", "expected": false },
            { "input": "0 0 0 1 0 ~/myScript", "expected": false },
            { "input": "0 0 1 1 7 ~/myScript", "expected": false },
            { "input": "0 0 1 1 0", "expected": false },
            { "input": "0 0 32 1 0 ~/myScript", "expected": false },
            { "input": "05 08 * * * ~/myScript", "expected": false },
            { "input": "* * 0 13 * ~/myScript", "expected": false }
        ],
        "hiddenTests": [
            { "input": "59 13 31 12 6 ~/myScript", "expected": true },
            { "input": "5 0 1 12 0 ~/myScript", "expected": true },
            { "input": "* * * * * ~/myScript", "expected": true },
            { "input": "15 3 * * 0 ~/myScript", "expected": true },
            { "input": "*/15 0-23 * * * ~/myScript", "expected": false },
            { "input": "5 4 10 11 2 ~/cleanup.sh", "expected": false },
            { "input": "15 * * * 7 ~/myScript", "expected": false },
            { "input": "15 * * * * ~//myScript", "expected": false },
            { "input": "15 * * * * ~/myScript", "expected": true },
            { "input": "0 0 * * * ~/myScript", "expected": true },
            { "input": "25 18 5 11 1 ~/launch.sh", "expected": false },
            { "input": "0 0 1 1 0 ~/myScript", "expected": true },
            { "input": "10 5 20 13 2 ~/execute.sh", "expected": false },
            { "input": "0 0 1 1 0 ~/myScript", "expected": true }
        ],
        "sampleAnswer": "([0-9]|[1-5][0-9]|\\*) ([0-9]|1[0-9]|2[0-3]|\\*) ([1-9]|[12][0-9]|3[01]|\\*) ([1-9]|1[012]|\\*) ([0-6]|\\*) ~\\/myScript"
    },
    {
        "id": 10,
        "title": "Sed",
        "prompt": "Sed (Stream editor) is a command-line utility to filter and transform ASCII text. The syntax for the command is `sed rule filename`. There are 3 `rule`s we will focus on.<br />1) `/regexp/d`: Will delete all lines that match `regexp` in the file.<br />2) `/s/regexp/replacement`: Will substitute the first occurrence of `regexp` in the file with `replacement`.<br />3) `/s/regexp/replacement/g`: Will substitute all occurrences of `regexp` in the file with `replacement`.<br /><br />Write a regular expression that will match an entire `sed` command accepting these three rules. Let `regexp`s be one or more of any character but a whitespace or a slash. Let `replacement`s be one or more of alphanumeric characters (lowercase or uppercase). Let the `filename` being scanned always be in the home directory (~), end in `.txt`, start with an uppercase or lowercase character and then have (uppercase or lowercase) alphanumeric characters after that, and have a length of at least 1.<br /><br />There will not be a slash after the file name. Make sure that spaces are provided where necessary.",
        "valid_examples": [
            "sed /abc/d ~/File.txt",
            "sed s/hello/WORLD ~/MyExample2.txt",
            "sed s/test/TEST/g ~/A1.txt",
            "sed /deletePattern/d ~/Example.txt",
            "sed s/find/Replace ~/TestFile.txt",
            "sed s/old/new/g ~/Script123.txt",
            "sed /removeLine/d ~/Sample1.txt",
            "sed s/foo/bar/g ~/AnotherFile.txt",
            "sed s/bar/foo ~/Change.txt",
            "sed s/123/abc/g ~/Numbers.txt"
        ],
        "invalid_examples": [
            {
                "example": "sed /abc/d",
                "reason": "missing filename"
            },
            {
                "example": "sed //d ~/File.txt",
                "reason": "empty regexp"
            },
            {
                "example": "sed s/test/OneMoreTime",
                "reason": "missing filename"
            },
            {
                "example": "sed s/hello/HELLO ~/MyExample2.tx",
                "reason": "incorrect extension"
            },
            {
                "example": "sed /pattern/delete ~/LogFile.txt",
                "reason": "invalid rule format"
            },
            {
                "example": "sed s/lower/UPPER/g ~/2CaseTest.txt",
                "reason": "filename starts with a number"
            },
            {
                "example": "sed s/special/@!/g ~/Special.txt",
                "reason": "invalid replacement characters"
            },
            {
                "example": "sed s/space /Space/g ~/SpaceFile.txt",
                "reason": "regexp contains space"
            },
            {
                "example": "sed /removeLine/d ~/dir/Sample1.txt",
                "reason": "file not in home directory"
            },
            {
                "example": "sed /deletePattern/d ~/file.txt/",
                "reason": "slash after the filename"
            },
            {
                "example": "sed s//replacement/g ~/NoRegexp.txt",
                "reason": "empty regexp"
            },
            {
                "example": "sed s/abc def/g ~/file.txt",
                "reason": "replacement contains space"
            }
        ],
        "publicTests": [
            { "input": "sed /abc/d ~/File.txt", "expected": true },
            { "input": "sed s/hello/WORLD ~/MyExample2.txt", "expected": true },
            { "input": "sed s/test/TEST/g ~/A1.txt", "expected": true },
            { "input": "sed /deletePattern/d ~/Example.txt", "expected": true },
            { "input": "sed s/find/Replace ~/TestFile.txt", "expected": true },
            { "input": "sed s/old/new/g ~/Script123.txt", "expected": true },
            { "input": "sed /removeLine/d ~/Sample1.txt", "expected": true },
            { "input": "sed s/foo/bar/g ~/AnotherFile.txt", "expected": true },
            { "input": "sed s/bar/foo ~/Change.txt", "expected": true },
            { "input": "sed s/123/abc/g ~/Numbers.txt", "expected": true },
            { "input": "sed /abc/d", "expected": false },
            { "input": "sed //d ~/File.txt", "expected": false },
            { "input": "sed s/test/OneMoreTime", "expected": false },
            { "input": "sed s/hello/HELLO ~/MyExample2.tx", "expected": false },
            { "input": "sed /pattern/delete ~/LogFile.txt", "expected": false },
            { "input": "sed s/lower/UPPER/g ~/2CaseTest.txt", "expected": false },
            { "input": "sed s/special/@!/g ~/Special.txt", "expected": false },
            { "input": "sed s/space /Space/g ~/SpaceFile.txt", "expected": false },
            { "input": "sed /removeLine/d ~/dir/Sample1.txt", "expected": false },
            { "input": "sed /deletePattern/d ~/file.txt/", "expected": false },
            { "input": "sed s//replacement/g ~/NoRegexp.txt", "expected": false },
            { "input": "sed s/abc def/g ~/file.txt", "expected": false }
        ],
        "hiddenTests": [
            { "input": "sed s/one/two/g ~/Convert.txt", "expected": true },
            { "input": "sed s/invalid//g ~/Invalid.txt", "expected": false },
            { "input": "sed s/hello/HELLO/g ~/Greeting.txt", "expected": true },
            { "input": "sed /Stuff/d ~/MyFile123.txt", "expected": true },
            { "input": "sed s/space /Space/g ~/MissingSpace.txt", "expected": false },
            { "input": "sed s/extra/slash//g ~/ExtraSlash.txt", "expected": false },
            { "input": "sed s/X/Y/g ~/FileABC99.txt", "expected": true },
            { "input": "sed /pattern/d ~/LogFile.txt", "expected": true },
            { "input": "sed s/123/abc/g ~/Numbers.txt", "expected": true },
            { "input": "sed s/hello/HELLO ~/Greeting.txtt", "expected": false },
            { "input": "sed s/Foo/Bar/g ~/ExampleFile.txt", "expected": true },
            { "input": "sed s/special/@!/g ~/Special.txt", "expected": false },
            { "input": "sed /delete/d ~/DeleteMe.txt", "expected": true },
            { "input": "sed /invalid ~/BadFile.txt", "expected": false },
            { "input": "sed s/hello/HELLO ~//Greeting.txt", "expected": false },
            { "input": "sed s/Test1/Test2/g ~/TestFile.txt", "expected": true },
            { "input": "sed /def/d", "expected": false },
            { "input": "sed /removeLine/d ~/Sample1.tx", "expected": false },
            { "input": "sed s/lower/UPPER/g ~/CaseTest.txt", "expected": true },
            { "input": "sed s//replacement/g ~/NoRegexp.txt", "expected": false }
        ],
        "sampleAnswer": "sed (\\/.+\\/d|s\\/[^\\s\\/]+\\/[a-zA-Z0-9]+(\\/g)?) ~\\/[a-zA-Z][a-zA-Z0-9]*\\.txt"
    },
    {
        "id": 11,
        "title": "URL",
        "prompt": "Write a regular expression to validate a URL. A valid URL follows these rules:<br /><br />1. The protocol must be one of the following: `http`, `https`, or `ftp`.<br />2. The protocol is followed by `://`.<br />3. The domain name consists of:<br />&nbsp&nbsp&nbsp&nbsp- One or more subdomains separated by periods. Each subdomain must start with an alphanumeric character and may include hyphens.<br />&nbsp&nbsp&nbsp&nbsp- A top-level domain (TLD) that is either `.com`, `.org`, `.net`, `.io`, or `.gov`.<br />4. The URL may optionally include a port number after the domain, starting with a colon `:` and followed by a non-zero-padded number from 0 to 65535.<br />5. The URL may optionally include a path, which starts with `/` and may contain alphanumeric characters, hyphens, underscores, or periods. The path may also include additional `/` to represent directories.<br />6. Query strings (starting with `?`) and fragments (starting with `#`) are optional. Both may contain alphanumeric characters and the symbols `&`, `=`, `_`, and `-`.",
        "valid_examples": [
            "http://example.com",
            "https://www.example.com",
            "ftp://sub.domain.io",
            "http://example.com:8080",
            "https://example.org/path/to/page",
            "https://example.net/path/to/page?query=1&sort=asc",
            "http://example.gov#fragment",
            "https://example.io:443/resource#details",
            "http://blog.example.com",
            "https://shop.example.org/products",
            "http://example.com/path-with-hyphens",
            "https://example.net/path_with_underscores",
            "ftp://sub.example.io:2121/uploads",
            "https://www.example.com?query=key&value=data",
            "http://example.com/resource.html#anchor",
            "ftp://example.gov:1234/subdir/file",
            "https://example.io:80/special.path"
        ],
        "invalid_examples": [
            {
                "example": "example.com",
                "reason": "Missing protocol"
            },
            {
                "example": "http:/example.com",
                "reason": "Incorrect protocol format"
            },
            {
                "example": "https://example",
                "reason": "Missing TLD"
            },
            {
                "example": "https://example.abc",
                "reason": "Invalid TLD"
            },
            {
                "example": "ftp://example.com:70000",
                "reason": "Port number out of range"
            },
            {
                "example": "http://-example.com",
                "reason": "Invalid domain name"
            },
            {
                "example": "http://example..com",
                "reason": "Double periods in domain"
            },
            {
                "example": "http://example.com/invalid path",
                "reason": "Space in path"
            },
            {
                "example": "http://example.com?query=value#frag#extra",
                "reason": "Multiple fragments"
            },
            {
                "example": "https://example.com::443",
                "reason": "Double colons"
            },
            {
                "example": "ftp://example.com:",
                "reason": "Port number missing after colon"
            },
            {
                "example": "http://.com",
                "reason": "Domain name missing"
            },
            {
                "example": "https://com",
                "reason": "Subdomain missing"
            },
            {
                "example": "http://example.com:/path",
                "reason": "Port number colon without value"
            },
            {
                "example": "ftp://example.io:999999/path",
                "reason": "Port number too large"
            },
            {
                "example": "http://example.com#fragment#extra",
                "reason": "Multiple fragments"
            },
            {
                "example": "https://-example.org",
                "reason": "Invalid domain name with leading hyphen"
            },
            {
                "example": "http://example.com?q=value space",
                "reason": "Query contains a space"
            },
            {
                "example": "ftp://example.com//path",
                "reason": "Double slash in path"
            },
            { 
                "example": "http://example.com:0000",
                "reason": "Port number zero-padded"
            },
            { 
                "example": "http://example.com:99999",
                "reason": "Port number too large"
            },
            { 
                "example": "http://example.com:000",
                "reason": "Port number zero-padded"
            }
        ],
        "publicTests": [
            { "input": "http://example.com", "expected": true },
            { "input": "https://www.example.com", "expected": true },
            { "input": "ftp://sub.domain.io", "expected": true },
            { "input": "http://example.com:8080", "expected": true },
            { "input": "https://example.org/path/to/page", "expected": true },
            { "input": "https://example.net/path/to/page?query=1&sort=asc", "expected": true },
            { "input": "http://example.gov#fragment", "expected": true },
            { "input": "https://example.io:443/resource#details", "expected": true },
            { "input": "http://blog.example.com", "expected": true },
            { "input": "https://shop.example.org/products", "expected": true },
            { "input": "http://example.com/path-with-hyphens", "expected": true },
            { "input": "https://example.net/path_with_underscores", "expected": true },
            { "input": "ftp://sub.example.io:2121/uploads", "expected": true },
            { "input": "https://www.example.com?query=key&value=data", "expected": true },
            { "input": "http://example.com/resource.html#anchor", "expected": true },
            { "input": "ftp://example.gov:1234/subdir/file", "expected": true },
            { "input": "https://example.io:80/special.path", "expected": true },
            { "input": "example.com", "expected": false },
            { "input": "http:/example.com", "expected": false },
            { "input": "https://example", "expected": false },
            { "input": "https://example.abc", "expected": false },
            { "input": "ftp://example.com:70000", "expected": false },
            { "input": "http://-example.com", "expected": false },
            { "input": "http://example..com", "expected": false },
            { "input": "http://example.com/invalid path", "expected": false },
            { "input": "http://example.com?query=value#frag#extra", "expected": false },
            { "input": "https://example.com::443", "expected": false },
            { "input": "ftp://example.com:", "expected": false },
            { "input": "http://.com", "expected": false },
            { "input": "https://com", "expected": false },
            { "input": "http://example.com:/path", "expected": false },
            { "input": "ftp://example.io:999999/path", "expected": false },
            { "input": "http://example.com#fragment#extra", "expected": false },
            { "input": "https://-example.org", "expected": false },
            { "input": "http://example.com?q=value space", "expected": false },
            { "input": "ftp://example.com//path", "expected": false },
            { "input": "http://example.com:0000", "expected": false },
            { "input": "http://example.com:99999", "expected": false },
            { "input": "http://example.com:000", "expected": false }
        ],
        "hiddenTests": [
            { "input": "https://subdomain.example.net/path#details", "expected": true },
            { "input": "ftp://fileserver.io/downloads", "expected": true },
            { "input": "http://localhost:8080/test", "expected": false },
            { "input": "https://example.com/path/to/resource?key=value", "expected": true },
            { "input": "ftp://example.org:21/resource?file=name", "expected": true },
            { "input": "http://-invalid.com", "expected": false },
            { "input": "https://example..com/path", "expected": false },
            { "input": "https://example.com:70000/path", "expected": false },
            { "input": "http://example.com?invalid query", "expected": false },
            { "input": "ftp://example.com#fragment#extra", "expected": false }
        ],
        "sampleAnswer": "(http|https|ftp):\\/\\/([a-zA-Z0-9]+[-a-zA-Z0-9]*\\.)+(com|org|net|io|gov)(:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9]{2}|6[0-4][0-9]{3}|[1-5][0-9]{1,4}|[1-9][0-9]{0,3}|[1-9]))?(\\/[a-zA-Z0-9._-]+)*(\\?[a-zA-Z0-9&=_-]+)?(#[-a-zA-Z0-9]+)?"
    },
    {
        "id": 12,
        "title": "ISBN",
        "prompt": "Write a regular expression to validate International Standard Book Numbers (ISBNs). An ISBN must be either in the `ISBN-10` or `ISBN-13` format.<br /><br />1. `ISBN-10`:<br />&nbsp&nbsp&nbsp&nbsp- The ISBN must contain exactly 10 characters.<br />&nbsp&nbsp&nbsp&nbsp- The first 9 characters must be digits.<br />&nbsp&nbsp&nbsp&nbsp- The 10th character must be either a digit or an uppercase `X`.<br />&nbsp&nbsp&nbsp&nbsp- Hyphens are optional, but if used, they must divide the ISBN into the following groups:<br />&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp*Group 1: 1 digit<br />&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp*Group 2: 1-5 digits<br />&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp*Group 3: 1-7 digits<br />&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp*Group 4: 1 digit or an '`X`' (capital) (the check digit)<br /><br />2. `ISBN-13` Format:<br />&nbsp&nbsp&nbsp&nbsp- The ISBN must contain exactly 13 digits.<br />&nbsp&nbsp&nbsp&nbsp- Hyphens are optional, but if used, they must divide the ISBN into the following groups:<br />&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp*Group 1: 3 digits (the prefix, either `978` or `979`)<br />&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp*Group 2: 1 digit<br />&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp*Group 3: 1-5 digits<br />&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp*Group 4: 1-7 digits<br />&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp*Group 5: 1 digit or an '`X`' (capital) (the check digit).<br />&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp- Note that this is the exact same as `ISBN-10`, just with 'Group 1' at the beginning.<br /><br />Ensure that the ISBN does not contain any spaces, letters (except `X`), or invalid characters like extra hyphens, symbols, or letters.",
        "valid_examples": [
            "978-3-16-148410-0",
            "9783161484100",
            "0-306-40615-2",
            "0306406152",
            "978-0-306-40615-7",
            "9780306406157",
            "978-1-56619-909-4",
            "1566199093",
            "1-84356-028-3",
            "1843560283",
            "978-1-56619-909-X",
            "184356028X"
        ],
        "invalid_examples": [
            {
                "example": "978-3-16-148410",
                "reason": "Missing final digit in ISBN-13"
            },
            {
                "example": "030640615-X",
                "reason": "Invalid hyphen before the 'X'"
            },
            {
                "example": "978-3-16-14841-00",
                "reason": "Incorrect grouping in ISBN-13"
            },
            {
                "example": "978316148410A",
                "reason": "Contains an invalid letter"
            },
            {
                "example": "978-3-16 148410-0",
                "reason": "Contains a space"
            },
            {
                "example": "978-3--16-148410-0",
                "reason": "Double hyphen"
            },
            {
                "example": "97803161484100",
                "reason": "Exceeds 13 digits for ISBN-13"
            },
            {
                "example": "03064061523",
                "reason": "Exceeds 10 digits for ISBN-10"
            },
            {
                "example": "0306-406152",
                "reason": "Incorrect grouping in ISBN-10"
            },
            {
                "example": "978#316#1484100",
                "reason": "Contains invalid symbols"
            },
            {
                "example": "978-3-14-410-0",
                "reason": "10 numbers (implies ISBN-10) but five groups (implies ISBN-13)"
            },
            {
                "example": "988-3-16-148410-0",
                "reason": "ISBN-13 starts with 978 or 979"
            },
            {
                "example": "988-34-16-14810-0",
                "reason": "ISBN-13 has 1 digit in the second group"
            },
            {
                "example": "34-16-14810-0",
                "reason": "ISBN-10 has 1 digit in the first group"
            },
            {
                "example": "123456789",
                "reason": "9 characters"
            },
            {
                "example": "97-8-12345-678-9",
                "reason": "Invalid grouping"
            }
        ],
        "publicTests": [
            { "input": "978-3-16-148410-0", "expected": true },
            { "input": "9783161484100", "expected": true },
            { "input": "0-306-40615-2", "expected": true },
            { "input": "0306406152", "expected": true },
            { "input": "978-0-306-40615-7", "expected": true },
            { "input": "9780306406157", "expected": true },
            { "input": "978-1-56619-909-4", "expected": true },
            { "input": "1566199093", "expected": true },
            { "input": "1-84356-028-3", "expected": true },
            { "input": "1843560283", "expected": true },
            { "input": "978-1-56619-909-X", "expected": true },
            { "input": "184356028X", "expected": true },
            { "input": "978-3-16-148410", "expected": false },
            { "input": "030640615-X", "expected": false },
            { "input": "978-3-16-14841-00", "expected": false },
            { "input": "978316148410A", "expected": false },
            { "input": "978-3-16 148410-0", "expected": false },
            { "input": "978-3--16-148410-0", "expected": false },
            { "input": "97803161484100", "expected": false },
            { "input": "03064061523", "expected": false },
            { "input": "0306-406152", "expected": false },
            { "input": "978#316#1484100", "expected": false },
            { "input": "978-3-14-410-0", "expected": false },
            { "input": "988-3-16-148410-0", "expected": false },
            { "input": "988-34-16-14810-0", "expected": false },
            { "input": "34-16-14810-0", "expected": false },
            { "input": "123456789", "expected": false },
            { "input": "97-8-12345-678-9", "expected": false }
        ],
        "hiddenTests": [
            { "input": "978-0-345-39180-3", "expected": true },
            { "input": "0345391802", "expected": true },
            { "input": "9780345391803", "expected": true },
            { "input": "1-84356-028-3", "expected": true },
            { "input": "978-1-84356-028-3", "expected": true },
            { "input": "978-3-16-148410", "expected": false },
            { "input": "0-84356-028-X", "expected": true },
            { "input": "978-3-16-14841", "expected": false },
            { "input": "97831614841A0", "expected": false },
            { "input": "978--316-148410-0", "expected": false },
            { "input": "978-3-144-410-0", "expected": false },
            { "input": "978-3-144-4170-0", "expected": false }
        ],
        "sampleAnswer": "(978|979)?\\d{9}[\\dX]|(978-|979-)?\\d-(\\d-\\d{7}|\\d{2}-\\d{6}|\\d{3}-\\d{5}|\\d{4}-\\d{4}|\\d{5}-\\d{3})-[\\dX]"
    },
    {
        "id": 13,
        "title": "MAC Addresses",
        "prompt": "A MAC address is a unique identifier assigned to network interfaces for communications on the physical network. Write a regular expression to validate MAC addresses.<br /><br />A valid MAC address must follow these rules:<br />1. It consists of 6 groups of 2 hexadecimal digits (0-9, A-F, a-f).<br />2. Each group is separated by either a colon (:) or a hyphen (-).<br />3. The groups must be consistent in their separator (either all colons or all hyphens).<br /><br />Ensure that there are no additional characters before, after, or in between the required parts.",
        "valid_examples": [
            "00:1A:2B:3C:4D:5E",
            "00-1A-2B-3C-4D-5E",
            "01:23:45:67:89:AB",
            "01-23-45-67-89-AB",
            "a1:b2:c3:d4:e5:f6",
            "a1-b2-c3-d4-e5-f6",
            "A1:B2:C3:D4:E5:F6",
            "A1-B2-C3-D4-E5-F6"
        ],
        "invalid_examples": [
            {
                "example": "00:1A:2B:3C:4D:5E:6F",
                "reason": "too many groups"
            },
            {
                "example": "00-1A-2B-3C-4D",
                "reason": "too few groups"
            },
            {
                "example": "00:1A:2B:3C:4D:5G",
                "reason": "invalid character 'G'"
            },
            {
                "example": "00-1A-2B-3C-4D-5E-",
                "reason": "trailing hyphen"
            },
            {
                "example": "00:1A:2B:3C:4D:5E:",
                "reason": "trailing colon"
            },
            {
                "example": "00-1A:2B:3C:4D-5E",
                "reason": "mixed separators"
            },
            {
                "example": "001A:2B:3C:4D:5E",
                "reason": "missing separator"
            },
            {
                "example": "00:1A:2B:3C:4D:5",
                "reason": "incomplete group"
            },
            {
                "example": "00:1A:2B:3C:4D:5E:7F",
                "reason": "too many groups"
            },
            {
                "example": "00:1A:2B:3C:4D:5E:7",
                "reason": "too many groups + incomplete group"
            },
            {
                "example": "1A:2B:3C:4D:5E:7G",
                "reason": "invalid character 'G'"
            },
            {
                "example": "1A-2B:3C-4D:5E:7D",
                "reason": "mixed separators"
            },
            {
                "example": "1A:2B:3C:4D:5E:7D:",
                "reason": "trailing colon"
            },
            {
                "example": "1A:2B:3C:4D:5E:7D-",
                "reason": "trailing hyphen"
            },
            {
                "example": "00:1A:2B:3C:4D:5E:7",
                "reason": "too many groups"
            },
            {
                "example": "1A:2B:3C:4D:5E:7G",
                "reason": "invalid character 'G'"
            },
            {
                "example": "1A:2B:3C-4D:5E:7D",
                "reason": "mixed separators"
            },
            {
                "example": "1A:2B:3C:4D:5E:7D:",
                "reason": "trailing colon"
            },
            {
                "example": "1A:2B-3C:4D:5E:7D",
                "reason": "mixed separators"
            },
            {
                "example": "A1:B2-C3:D4:E5:F6",
                "reason": "mixed separators"
            },
            {
                "example": "A:B2:C3:D4:E5:F6",
                "reason": "one-digit group"
            }
        ],
        "publicTests": [
            { "input": "00:1A:2B:3C:4D:5E", "expected": true },
            { "input": "00-1A-2B-3C-4D-5E", "expected": true },
            { "input": "01:23:45:67:89:AB", "expected": true },
            { "input": "01-23-45-67-89-AB", "expected": true },
            { "input": "a1:b2:c3:d4:e5:f6", "expected": true },
            { "input": "a1-b2-c3-d4-e5-f6", "expected": true },
            { "input": "A1:B2:C3:D4:E5:F6", "expected": true },
            { "input": "A1-B2-C3-D4-E5-F6", "expected": true },
            { "input": "00:1A:2B:3C:4D:5E:6F", "expected": false },
            { "input": "00-1A-2B-3C-4D", "expected": false },
            { "input": "00:1A:2B:3C:4D:5G", "expected": false },
            { "input": "00-1A-2B-3C-4D-5E-", "expected": false },
            { "input": "00:1A:2B:3C:4D:5E:", "expected": false },
            { "input": "00-1A:2B:3C:4D-5E", "expected": false },
            { "input": "001A:2B:3C:4D:5E", "expected": false },
            { "input": "00:1A:2B:3C:4D:5", "expected": false },
            { "input": "00:1A:2B:3C:4D:5E:7F", "expected": false },
            { "input": "00:1A:2B:3C:4D:5E:7", "expected": false },
            { "input": "1A:2B:3C:4D:5E:7G", "expected": false },
            { "input": "1A-2B:3C-4D:5E:7D", "expected": false },
            { "input": "1A:2B:3C:4D:5E:7D:", "expected": false },
            { "input": "1A:2B:3C:4D:5E:7D-", "expected": false },
            { "input": "00:1A:2B:3C:4D:5E:7", "expected": false },
            { "input": "1A:2B:3C:4D:5E:7G", "expected": false },
            { "input": "1A:2B:3C-4D:5E:7D", "expected": false },
            { "input": "1A:2B:3C:4D:5E:7D:", "expected": false },
            { "input": "1A:2B-3C:4D:5E:7D", "expected": false },
            { "input": "A1:B2-C3:D4:E5:F6", "expected": false },
            { "input": "A:B2:C3:D4:E5:F6", "expected": false }
        ],
        "hiddenTests": [
            { "input": "001A:2B:3C:4D:5E", "expected": false },
            { "input": "01:23:45:67:89:AB", "expected": true },
            { "input": "a1:b2:c3:d4:E5:F6", "expected": true },
            { "input": "00:1A:2B:3C:4D:5", "expected": false },
            { "input": "A1:B2:C3:D4:E5:F6", "expected": true },
            { "input": "00:1A:2B:3C:4D:5E:6F", "expected": false },
            { "input": "00-1A-2B:3C:4D-5E-", "expected": false },
            { "input": "01-23:45:67:89:AB", "expected": false },
            { "input": "00:1A:2B:3C:4D:5G", "expected": false },
            { "input": "00-1A-2B:3C:4D:5E", "expected": false },
            { "input": "00:1A:2B:3C:4D:5E:", "expected": false },
            { "input": "00-1A-2B:3C:4D", "expected": false },
            { "input": "a1-b2:c3:d4:e5:f6", "expected": false },
            { "input": "A1-B2:C3:D4:E5:F6", "expected": false },
            { "input": "00:1A:2B:3C:4D:5E", "expected": true },
            { "input": "00:1A:2B:3C:4D:5E-", "expected": false }
        ],
        "sampleAnswer": "([0-9A-Fa-f]{2}-){5}[0-9A-Fa-f]{2}|([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}"
    },
    {
        "id": 14,
        "title": "Credit Card Numbers",
        "prompt": "Write a regular expression to validate credit card numbers. A valid credit card number must meet these requirements:<br /><br />1. It consists of exactly 16 digits in total.<br />2. You may optionally separate each group of 4 digits with a single hyphen (`-`) or space (` `).<br />3. Mixed separators are not allowed (all spaces or all hyphens, or no separators at all).<br />4. No extra characters are allowed before, after, or in between.<br /><br />Examples of valid patterns include:<br />- 16 consecutive digits, e.g. `1234567812345678`<br />- Groups of 4 digits separated by hyphens, e.g. `1234-5678-1234-5678`<br />- Groups of 4 digits separated by spaces, e.g. `1234 5678 1234 5678`",
        "valid_examples": [
            "1234567812345678",
            "1111222233334444",
            "0000111122223333",
            "9999999999999999",
            "1234-5678-1234-5678",
            "0000-1111-2222-3333",
            "9999 8888 7777 6666",
            "1234 5678 1234 5678",
            "5555555555554444",
            "0123-4567-8901-2345",
            "1234-5673-1234-5678"
        ],
        "invalid_examples": [
            {
                "example": "1234-567-1234-5678",
                "reason": "one group has only 3 digits"
            },
            {
                "example": "123456789012345",
                "reason": "only 15 digits"
            },
            {
                "example": "12345678901234567",
                "reason": "17 digits"
            },
            {
                "example": "1 2345 6789 0123 4567",
                "reason": "five groups and total more than 16 digits"
            },
            {
                "example": "0000-1111 2222 3333",
                "reason": "mixed separators"
            },
            {
                "example": "1234--5678--1234--5678",
                "reason": "double hyphen separators"
            },
            {
                "example": "123456789012345a",
                "reason": "contains a non-digit character"
            },
            {
                "example": " 1234567812345678 ",
                "reason": "leading or trailing whitespace"
            },
            {
                "example": "1234-5678-1234-56789",
                "reason": "extra digit at the end"
            },
            {
                "example": "abcd-efgh-ijkl-mnop",
                "reason": "all characters are letters"
            },
            {
                "example": "---- ---- ---- ----",
                "reason": "only separators, no digits"
            },
            {
                "example": "1234--5678-1234-5678",
                "reason": "some groups have double hyphens"
            },
            {
                "example": "1234 5678 1234  5678",
                "reason": "two spaces in one group"
            },
            {
                "example": "12-34-56-78-90-12-34-56",
                "reason": "eight groups of 2 digits each"
            },
            {
                "example": "1234-5678 1234-5678",
                "reason": "mixed separators"
            },
            {
                "example": "123456781234567",
                "reason": "only 15 digits"
            },
            {
                "example": "1234 5678 1234 56789",
                "reason": "extra digit at the end"
            },
            {
                "example": "1111 2222 3333 44441",
                "reason": "one group has 5 digits"
            },
            {
                "example": "1234 5678 1234 56705",
                "reason": "last group has 5 digits"
            },
            {
                "example": "----111122223333",
                "reason": "only separators, no digits"
            },
            {
                "example": "12 34567812345678",
                "reason": "two digits in the first group"
            },
            {
                "example": "1234 5678 1234 5678 ",
                "reason": "trailing whitespace"
            },
            {
                "example": " 1234 5678 1234 5678",
                "reason": "leading whitespace"
            },
            {
                "example": "1234-5678-1234-5678-",
                "reason": "trailing separator"
            },
            {
                "example": "-1234-5678-1234-5678",
                "reason": "leading separator"
            },
            {
                "example": "1234 5678 1234 5678-",
                "reason": "trailing separator"
            },
            {
                "example": "-1234 5678 1234 5678",
                "reason": "leading separator"
            }
        ],
        "publicTests": [
            { "input": "1234567812345678", "expected": true },
            { "input": "1111222233334444", "expected": true },
            { "input": "0000111122223333", "expected": true },
            { "input": "9999999999999999", "expected": true },
            { "input": "1234-5678-1234-5678", "expected": true },
            { "input": "0000-1111-2222-3333", "expected": true },
            { "input": "9999 8888 7777 6666", "expected": true },
            { "input": "1234 5678 1234 5678", "expected": true },
            { "input": "5555555555554444", "expected": true },
            { "input": "0123-4567-8901-2345", "expected": true },
            { "input": "0123-4567-8901-2345", "expected": true },
            { "input": "1234-5673-1234-5678", "expected": true },
            { "input": "1234-567-1234-5678", "expected": false },
            { "input": "123456789012345", "expected": false },
            { "input": "12345678901234567", "expected": false },
            { "input": "1 2345 6789 0123 4567", "expected": false },
            { "input": "0000-1111 2222 3333", "expected": false },
            { "input": "1234--5678--1234--5678", "expected": false },
            { "input": "123456789012345a", "expected": false },
            { "input": " 1234567812345678 ", "expected": false },
            { "input": "1234-5678-1234-56789", "expected": false },
            { "input": "abcd-efgh-ijkl-mnop", "expected": false },
            { "input": "---- ---- ---- ----", "expected": false },
            { "input": "1234--5678-1234-5678", "expected": false },
            { "input": "1234 5678 1234  5678", "expected": false },
            { "input": "12-34-56-78-90-12-34-56", "expected": false },
            { "input": "1234-5678 1234-5678", "expected": false },
            { "input": "123456781234567", "expected": false },
            { "input": "1234 5678 1234 56789", "expected": false },
            { "input": "1111 2222 3333 44441", "expected": false },
            { "input": "1234 5678 1234 56705", "expected": false },
            { "input": "----111122223333", "expected": false },
            { "input": "12 34567812345678", "expected": false },
            { "input": "1234 5678 1234 5678 ", "expected": false },
            { "input": " 1234 5678 1234 5678", "expected": false },
            { "input": "1234-5678-1234-5678-", "expected": false },
            { "input": "-1234-5678-1234-5678", "expected": false },
            { "input": "1234 5678 1234 5678-", "expected": false },
            { "input": "-1234 5678 1234 5678", "expected": false }
        ],
        "hiddenTests": [
            { "input": "1234 5678-1234-5678", "expected": false },
            { "input": "8888-1111-2222-3333", "expected": true },
            { "input": "123456781234567", "expected": false },
            { "input": "4444444444444444", "expected": true },
            { "input": "1111 2222 3333 44441", "expected": false },
            { "input": "1234 5678 1234 5670", "expected": true },
            { "input": "----111122223333", "expected": false },
            { "input": "12 34567812345678", "expected": false },
            { "input": "1234 5678 1234 5678", "expected": true },
            { "input": "1234-5678-1234-5678", "expected": true },
            { "input": "1234567812345678", "expected": true },
            { "input": "1234 5678 1234 567", "expected": false },
            { "input": "1234-5678-1234-567", "expected": false },
            { "input": "123456781234567", "expected": false },
            { "input": "1234 5678 1234 56789", "expected": false },
            { "input": "1234-5678-1234-56789", "expected": false },
            { "input": "12345678123456789", "expected": false },
            { "input": "1234 5678 1234 5678 ", "expected": false },
            { "input": " 1234 5678 1234 5678", "expected": false },
            { "input": "1234-5678-1234-5678-", "expected": false },
            { "input": "-1234-5678-1234-5678", "expected": false },
            { "input": "1234 5678 1234 5678-", "expected": false },
            { "input": "-1234 5678 1234 5678", "expected": false }
        ],
        "sampleAnswer": "(\\d{4}-){3}\\d{4}|(\\d{4}\\ ){3}\\d{4}|(\\d{4}){3}\\d{4}"
    },
    {
        "id": 15,
        "title": "Rocket Launch Codes",
        "prompt": "Write a regular expression to validate Rocket Launch Codes. A valid code must follow these rules:<br /><br />1. The code must begin with `LAUNCH-` (uppercase).<br />2. Immediately after, you must have a 4-digit year ranging from 1970 to 2050 (inclusive).<br />3. After that, you must place a dash (`-`).<br />4. After the dash, you must have exactly 2 uppercase letters representing the rocket series (e.g., `AB`).<br />5. Then, you must have another dash (`-`).<br />6. Finally, you must include a flight number from 1 to 999. This flight number can have one to three digits (leading zeros are allowed, so `001` is acceptable).<br /><br />Do not allow any extra characters, spaces, or symbols beyond this exact format.",
        "valid_examples": [
            "LAUNCH-1970-AB-1",
            "LAUNCH-2050-ZZ-999",
            "LAUNCH-1999-RQ-10",
            "LAUNCH-2000-XY-001",
            "LAUNCH-2020-AA-123",
            "LAUNCH-2049-BB-999",
            "LAUNCH-1985-ZZ-050",
            "LAUNCH-1971-AB-007",
            "LAUNCH-2050-AB-001",
            "LAUNCH-1970-RR-999"
        ],
        "invalid_examples": [
            {
                "example": "launch-1970-AB-1",
                "reason": "missing uppercase in first word"
            },
            {
                "example": "LAUNCH-1969-AB-100",
                "reason": "year out of range"
            },
            {
                "example": "LAUNCH-2051-AZ-10",
                "reason": "year out of range"
            },
            {
                "example": "LAUNCH-2000-ABC-10",
                "reason": "3 letters instead of 2"
            },
            {
                "example": "LAUNCH-2000-AB-1000",
                "reason": "flight number out of range"
            },
            {
                "example": "LAUNCH-2000-AB",
                "reason": "missing final flight number"
            },
            {
                "example": "LAUNCH-2000-AB-",
                "reason": "final dash with no flight number"
            },
            {
                "example": "LAUNCH-2010AB50",
                "reason": "missing dashes"
            },
            {
                "example": "LAUNCH-2010-AB-5x",
                "reason": "extra invalid character"
            },
            {
                "example": "LAUNCH2010AB50",
                "reason": "missing multiple dashes"
            },
            {
                "example": "LAUNCH-2010-AB-0003",
                "reason": "4 digits at the end"
            }
        ],
        "publicTests": [
            { "input": "LAUNCH-1970-AB-1", "expected": true },
            { "input": "LAUNCH-2050-ZZ-999", "expected": true },
            { "input": "LAUNCH-1999-RQ-10", "expected": true },
            { "input": "LAUNCH-2000-XY-001", "expected": true },
            { "input": "LAUNCH-2020-AA-123", "expected": true },
            { "input": "LAUNCH-2049-BB-999", "expected": true },
            { "input": "LAUNCH-1985-ZZ-050", "expected": true },
            { "input": "LAUNCH-1971-AB-007", "expected": true },
            { "input": "LAUNCH-2050-AB-001", "expected": true },
            { "input": "LAUNCH-1970-RR-999", "expected": true },
            { "input": "launch-1970-AB-1", "expected": false },
            { "input": "LAUNCH-1969-AB-100", "expected": false },
            { "input": "LAUNCH-2051-AZ-10", "expected": false },
            { "input": "LAUNCH-2000-ABC-10", "expected": false },
            { "input": "LAUNCH-2000-AB-1000", "expected": false },
            { "input": "LAUNCH-2000-AB", "expected": false },
            { "input": "LAUNCH-2000-AB-", "expected": false },
            { "input": "LAUNCH-2010AB50", "expected": false },
            { "input": "LAUNCH-2010-AB-5x", "expected": false },
            { "input": "LAUNCH2010AB50", "expected": false },
            { "input": "LAUNCH-2010-AB-0003", "expected": false }
        ],
        "hiddenTests": [
            { "input": "LAUNCH-2015-GG-010", "expected": true },
            { "input": "LAUNCH-1970-AB-1", "expected": true },
            { "input": "LAUNCH-2200-XX-5", "expected": false },
            { "input": "LAUNCH-1970-AB-001", "expected": true },
            { "input": "LAUNCH-2051-AA-50", "expected": false },
            { "input": "LAUNCH-2000-RA-1000", "expected": false },
            { "input": "LAUNCH-2019-ZZ-9990", "expected": false },
            { "input": "LAUNCH-2030-XY-999", "expected": true },
            { "input": "LAUNCH-2001-AB-12", "expected": true },
            { "input": "LAUNCH-1969-AB-100", "expected": false },
            { "input": "LAUNCH-2000-ZZ-455", "expected": true },
            { "input": "LAUNCH-2050-ZZ-999", "expected": true },
            { "input": "LAUNCH-2005-00-10", "expected": false },
            { "input": "LAUNCH-1970-ABC-99", "expected": false },
            { "input": "LAUNCH-2000-AB", "expected": false },
            { "input": "LAUNCH-2000-AB-", "expected": false },
            { "input": "launch-1970-AB-5", "expected": false },
            { "input": "LAUNCH2020AB-505", "expected": false },
            { "input": "LAUNCH-2020-AB-05x", "expected": false },
            { "input": "LAUNCH-2020AB05", "expected": false },
            { "input": "LAUNCH-1970-AB--50", "expected": false },
            { "input": "LAUNCH-2000AB-100", "expected": false },
            { "input": "NOPE-2000-AB-100", "expected": false },
            { "input": "LAUNCH-1970-AB-0", "expected": true },
            { "input": "LAUNCH-2051-ZZ-999", "expected": false }
        ],
        "sampleAnswer": "LAUNCH-(19[7-9]\\d|20[0-4]\\d|2050)-[A-Z]{2}-[0-9]{1,3}"
    },
    {
        "id": 16,
        "title": "GitHub Repositories",
        "prompt": "Write a regular expression to validate a GitHub repository in the format 'username/repository' with the following constraints: The username must be 2 to 39 characters, consisting only of uppercase or lowercase letters, digits, or hyphens (`-`). It cannot start or end with a hyphen. The repository name must be 2 to 100 characters, consisting only of uppercase or lowercase letters, digits, underscores (`_`), or hyphens (`-`). It cannot start or end with a hyphen or underscore. Ensure that there are no additional characters before or after the required parts.",
        "valid_examples": [
            "myuser/myrepo",
            "User-Name/Repo_Name",
            "aa/bb",
            "Z9/H_9",
            "abc-123/abc_123",
            "HelloWorld/Hello_World",
            "XYZ/Abcdefghijklmnopqrstuvwyz1234567890",
            "Ab-12/Git-Repo_1",
            "zyx987/m_U",
            "a1234567890123456789012345678901234567/b1234567890123456789012345678901234567",
            "UserName/RepoNameWithHyphens-And_Underscores",
            "abcde12345abcde12345abcde12345abcde1234/repo",
            "AAAAAA/BBBBBB",
            "longusername-reallylong-butvalid/Valid_Repo-Name",
            "USER123/RepoName", 
            "john-doe/this_repo_is_100_chars_longxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
        ],
        "invalid_examples": [
            {
                "example": "myuser",
                "reason": "no slash"
            },
            {
                "example": "/myrepo",
                "reason": "missing username"
            },
            {
                "example": "MyUser-/Repo",
                "reason": "username ends with hyphen"
            },
            {
                "example": "myuser/my_repo_",
                "reason": "repo ends with underscore"
            },
            {
                "example": "myuser/_myrepo",
                "reason": "repo starts with underscore"
            },
            {
                "example": "-myuser/repo",
                "reason": "username starts with hyphen"
            },
            {
                "example": "myuser/my?repo",
                "reason": "invalid character ?"
            },
            {
                "example": "myUser!/repo",
                "reason": "invalid character !"
            },
            {
                "example": "abcde12345abcde12345abcde12345abcde12345/myrepo",
                "reason": "username too long"
            },
            {
                "example": "myuser/myrepo_",
                "reason": "repo ends with underscore"
            },
            {
                "example": "myuser/--Repo",
                "reason": "repo starts with multiple hyphens"
            },
            {
                "example": "myuser/Repo--",
                "reason": "repo ends with multiple hyphens"
            },
            {
                "example": "my-user/repo__",
                "reason": "repo ends with multiple underscores"
            },
            {
                "example": "my_user/_repo",
                "reason": "repo starts with underscore"
            },
            {
                "example": "my-user/repo?",
                "reason": "invalid character ?"
            },
            {
                "example": "my-user/repo name",
                "reason": "space not allowed"
            },
            {
                "example": "somebody12345/this_repo_is_101_chars_longxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
                "reason": "repo too long"
            },
            {
                "example": "myusername/---invalid",
                "reason": "repo starts with multiple hyphens"
            },
            {
                "example": "myusername/___invalid",
                "reason": "repo starts with underscores"
            },
            {
                "example": "myusername/inv@alid",
                "reason": "invalid character @"
            },
            {
                "example": "username/invalid(repos)",
                "reason": "invalid character ("
            },
            {
                "example": "UPPERCASE-/InvalidRepoName",
                "reason": "username ends with hyphen"
            },
            {
                "example": "Lowercase/InvalidRepoName-",
                "reason": "repo ends with hyphen"
            },
            {
                "example": "a/b",
                "reason": "username and repo name too small"
            },
            {
                "example": "aa/b",
                "reason": "repo name too small"
            },
            {
                "example": "a/bb",
                "reason": "username name too small"
            }
        ],
        "publicTests": [
            { "input": "myuser/myrepo", "expected": true },
            { "input": "User-Name/Repo_Name", "expected": true },
            { "input": "aa/bb", "expected": true },
            { "input": "Z9/H_9", "expected": true },
            { "input": "abc-123/abc_123", "expected": true },
            { "input": "HelloWorld/Hello_World", "expected": true },
            { "input": "XYZ/Abcdefghijklmnopqrstuvwyz1234567890", "expected": true },
            { "input": "Ab-12/Git-Repo_1", "expected": true },
            { "input": "zyx987/m_U", "expected": true },
            { "input": "a1234567890123456789012345678901234567/b1234567890123456789012345678901234567", "expected": true },
            { "input": "UserName/RepoNameWithHyphens-And_Underscores", "expected": true },
            { "input": "abcde12345abcde12345abcde12345abcde1234/repo", "expected": true },
            { "input": "AAAAAA/BBBBBB", "expected": true },
            { "input": "longusername-reallylong-butvalid/Valid_Repo-Name", "expected": true },
            { "input": "USER123/RepoName", "expected": true },
            { "input": "john-doe/this_repo_is_100_chars_longxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "expected": true },
            { "input": "myuser", "expected": false },
            { "input": "/myrepo", "expected": false },
            { "input": "MyUser-/Repo", "expected": false },
            { "input": "myuser/my_repo_", "expected": false },
            { "input": "myuser/_myrepo", "expected": false },
            { "input": "-myuser/repo", "expected": false },
            { "input": "myuser/my?repo", "expected": false },
            { "input": "myUser!/repo", "expected": false },
            { "input": "abcde12345abcde12345abcde12345abcde12345/myrepo", "expected": false },
            { "input": "myuser/myrepo_", "expected": false },
            { "input": "myuser/--Repo", "expected": false },
            { "input": "myuser/Repo--", "expected": false },
            { "input": "my-user/repo__", "expected": false },
            { "input": "my_user/_repo", "expected": false },
            { "input": "my-user/repo?", "expected": false },
            { "input": "my-user/repo name", "expected": false },
            {
            "input": "somebody12345/this_repo_is_101_chars_longxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
            "expected": false
            },
            { "input": "myusername/---invalid", "expected": false },
            { "input": "myusername/___invalid", "expected": false },
            { "input": "myusername/inv@alid", "expected": false },
            { "input": "longusername-reallylong-butvalid/Valid_Repo-Name", "expected": true },
            { "input": "username/invalid(repos)", "expected": false },
            { "input": "USER123/RepoName", "expected": true },
            { "input": "EndHyphen-/repo", "expected": false },
            { "input": "UPPERCASE-/InvalidRepoName", "expected": false },
            { "input": "Lowercase/InvalidRepoName-", "expected": false },
            { "input": "a/b", "expected": false },
            { "input": "aa/b", "expected": false },
            { "input": "a/bb", "expected": false }
        ],
        "hiddenTests": [
            { "input": "user/repo", "expected": true },
            { "input": "uu/rr", "expected": true },
            { "input": "u/rr", "expected": false },
            { "input": "uu/r", "expected": false },
            { "input": "abcDEF123/abcDEF123", "expected": true },
            { "input": "my-user-name/super-duper_123", "expected": true },
            { "input": "userName9/validRepo999", "expected": true },
            { "input": "9username/validrepo", "expected": true },
            { "input": "username-/repo", "expected": false },
            { "input": "userName/invalid_repo_", "expected": false },
            { "input": "UserName/Invalid_RepoName?", "expected": false },
            { "input": "john/do", "expected": true },
            { "input": "john/do2-", "expected": false },
            { "input": "my-hyphened-user-/my-repo", "expected": false },
            {
            "input": "a/-----------------------------------------------------------------------------------",
            "expected": false
            },
            {
            "input": "not-hyphen-lol/--------------------------------------------------------------------------",
            "expected": false
            },
            { "input": "validuser/hyphens_in-_the-middle", "expected": true },
            { "input": "validuser/_underscored", "expected": false },
            { "input": "validuser/repo_", "expected": false },
            { "input": "username/re_po", "expected": true },
            { "input": "username/rep-o", "expected": true },
            { "input": "username/___", "expected": false },
            { "input": "validuser/rr", "expected": true },
            { "input": "ValidUser-Good/Repo", "expected": true },
            { "input": "Invalid@username/repo", "expected": false },
            {
            "input": "ThisUsernameIsWayTooLongBecauseItExceedsTheMaximumOf39Characters/Repo",
            "expected": false
            },
            {
            "input": "abc/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
            "expected": false
            }
        ],
        "sampleAnswer": "[A-Za-z0-9][A-Za-z0-9-]{0,37}[A-Za-z0-9]/[A-Za-z0-9][A-Za-z0-9_-]{0,98}[A-Za-z0-9]"
    }
]